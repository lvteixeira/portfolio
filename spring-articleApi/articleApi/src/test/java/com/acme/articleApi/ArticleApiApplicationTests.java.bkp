package com.acme.articleApi;

import com.acme.articleApi.model.ArticleEntity;
import com.acme.articleApi.service.ArticleService;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.ArrayList;
import java.util.List;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.junit.Assert.*;
import org.springframework.http.MediaType;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class ArticleApiApplicationTests {
    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ArticleService service;

    private List<ArticleEntity> articles = new ArrayList<>();

    public String asJsonString(final Object obj) {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            final String jsonContent = mapper.writeValueAsString(obj);
            return jsonContent;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public void populateArticles() {
        ArticleEntity article1 = new ArticleEntity();
        ArticleEntity article2 = new ArticleEntity();
        ArticleEntity article3 = new ArticleEntity();

        article1.setTitle("10 things that you thought were unhealthy");
        article1.setBody("10 things that you...");

        article2.setTitle("You won't sleep until you read this");
        article2.setBody("You won't sleep...");

        article3.setTitle("I ran out of catchy titles");
        article3.setBody("I ran out of...");

        articles.add(article1);
        articles.add(article2);
        articles.add(article3);
    }

    @Before
    public void setup() {
        service.clear();
        populateArticles();

        for(ArticleEntity article: articles) {
            service.add(article);
        }
    }

    @Test
    public void shouldLetUsPostArticles() throws Exception {
        for (ArticleEntity article : articles) {
            mockMvc.perform(post("/articles")
                    .content(asJsonString(article))
                    .contentType(MediaType.APPLICATION_JSON)
                    .accept(MediaType.APPLICATION_JSON_UTF8))
                    .andExpect(status().is(201))
                    .andExpect(jsonPath("title", is(article.getTitle())));
        }
    }

    @Test
    public void shouldAllowUpdatingArticles() throws Exception {
        String body = "This is some filler text for a killer article";
        ArticleEntity article = service.getAll().get(0);

        article.setBody(body);
        String url = "/articles/" + article.getId();

        mockMvc.perform(put(url)
                        .content(asJsonString(article))
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().is(204));

        ArticleEntity actual = service.getAll().get(0);

        assertEquals("Should have updated the article", actual.getBody(), body);
    }

    @Test
    public void shouldAllowUsToRemoveArticles() throws Exception {
        List<ArticleEntity> all = new ArrayList<ArticleEntity>(service.getAll());

        for (ArticleEntity article : all) {
            mockMvc.perform(delete("/articles/" + article.getId()))
                    .andExpect(status().is(204));
        }

        assertEquals("Should remove all articles", 0, service.getAll().size());
    }
}